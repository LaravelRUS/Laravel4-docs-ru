== Сессии ==
{{Meta автор=из официальной документации, переводчик=Proger_XP, id переводчика=2, обновление=16.08.2013}}
{{Meta оригинал=doc4:session}}

{{TOC}}

== Настройка ==
HTTP-приложения не имеют //состояний//. Сессии - способ сохранения информации о клиенте между отдельными запросами. Laravel поставляется со множеством различных механизмов сессий, доступных через единое API. Изначально существует поддержка таких систем, как ((http://memcached.org/ Memcached)), ((http://redis.io/ Redis)) и СУБД.

Настройки сессии содержатся в файле %%(t)app/config/session.php%%. Обязательно просмотрите параметры, доступные вам - они хорошо документированы. По умолчанию Laravel использует драйвер **file**, который подходит для большинства приложений.

== Основы использования ==
**Сохранение переменной в сессии:**
%%
  Session::put('key', 'value');
%%

**Добавление элемента к переменной-массиву:**
%%
  Session::push('user.teams', 'developers');
%%

**Чтение переменной сессии:**
%%
  $value = Session::get('key');
%%

**Чтение переменной со значением по умолчанию:**
%%
  $value = Session::get('key', 'default');

  $value = Session::get('key', function() { return 'умолчание'; });
%%

**Получение всех переменных сессии:**
%%
  $data = Session::all();
%%

**Проверка существования переменой:**
%%
  if (Session::has('users')) {
    //
  }
%%

**Удаление переменной из сессии:**
%%
  Session::forget('key');
%%

**Удаление всех переменных:**
%%
  Session::flush();
%%

**Присвоение сессии нового идентификатора:**
%%
  Session::regenerate();
%%

== Одноразовые данные ==
Иногда вам нужно сохранить переменную только для следующего запроса. Вы можете сделать это методом %%Session::flash()%% (!!(tl_note)//flash// ^^англ.^^ - вспышка - //прим. пер.//!!):
%%
  Session::flash('key', 'value');
%%

**Продление всех одноразовых переменных ещё на один запрос:**
%%
  Session::reflash();
%%

**Продление только отдельных переменных:**
%%
  Session::keep(array('username', 'email'));
%%

== Сессии в базах данных ==
При использовании драйвера **database** вам нужно создать таблицу, которая будет содержать данные сессий. Ниже - пример такого объявления с помощью ((schema конструктора таблиц)):
%%
  Schema::create('sessions', function ($table) {
    $table->string('id')->unique();
    $table->text('payload');
    $table->integer('last_activity');
  });
%%

Либо вы можете использовать команду ((artisan Artisan)) для создания этой миграции:
%%(sh)
  php artisan session:table
  composer dump-autoload
  php artisan migrate
%%

== Драйверы ==
"Драйвер" определяет, где будут храниться данные для каждой сессии. Laravel постовляется с целым набором замечательных драйверов:
  * **native** - использует встроенные средства PHP для работы с сессиями.
  * **cookie** - данные хранятся в виде зашифрованных ((requests#cookie+s)).
  * **database** - хранение данных в БД, используемой приложением.
  * **memcached** и **redis** - используются эти быстрые кэширующие хранилища пар //ключ/значение//.
  * **array** - данные содержатся в виде простых массивов PHP и не будут сохраняться между запросами.

.(alert)
**Внимание:** драйвер **array** обычно используется для ((testing юнит-тестов)), так как он на самом деле не сохраняет данные для последующих запросов.
